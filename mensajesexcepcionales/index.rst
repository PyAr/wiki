.. title: Mensajes Excepcionales


  *"10. Los errores nunca deber√≠an dejarse pasar silenciosamente."* PythonZen_

Esta p√°gina busca ser una gu√≠a para las personas que se est√©n iniciando en este maravilloso lenguaje y se encuentren con errores comunes y no sepan como solucionarlos.

La idea es presentar ejemplos de excepciones, su traducci√≥n al espa√±ol y una posible soluci√≥n en cada caso.

¬øQue son las excepciones?
-------------------------

Las Excepciones (``Exceptions`` en ingl√©s) son condiciones excepcionales que eleva el sistema operativo, el lenguaje, o nuestro mismo programa.

No necesariamente pueden ser un error, tambi√©n existen advertencias que en general no interrumpen el flujo del programa.

¬øQue son los tracebacks (trazas de rastreo)?
--------------------------------------------

Las trazas de rastreo (``Traceback`` en ingl√©s) es la informaci√≥n que re√∫ne el lenguaje para informarnos sobre una excepci√≥n que ha ocurrido.

Por ejemplo:

.. code-block:: python

    Traceback (most recent call last):
      File "form.py", line 78, in <module>
        f = Form("factura.csv")
      File "form.py", line 12, in __init__
        for linea in open(infile).readlines():
    IOError: [Errno 2] No such file or directory: 'factura.csv'


Se traducir√≠a a:

.. code-block:: python

   Traza de rastreo (llamada m√°s reciente a lo √∫ltimo):
     Archivo "form.py", l√≠nea 78, en <m√≥dulo>
       f = Form("factura.csv")
     Archivo "form.py", l√≠nea 12, en __init__
       for linea in open(infile).readlines():
   IOError: [Errno 2] No existe el archivo o directorio: 'factura.csv'

Y nos dice que:

* Se produjo una excepci√≥n del tipo IOError con el mensaje "[Errno 2] No existe el archivo o directorio: 'factura.csv'"

* El problema surgi√≥ en la l√≠nea 12 de ``form.py`` (dentro de la funci√≥n ``__init__``): ``for linea in open(infile).readlines():``

* Esta funci√≥n fue llamada desde la l√≠nea 78 del mismo archivo (en el m√≥dulo, fuera de una funci√≥n): ``f = Form("factura.csv")``

* y as√≠ sucesivamente (si tuvieramos m√°s llamadas encadenadas, la lista ser√≠a m√°s larga)

En este ejemplo, vemos que le estamos pasando un nombre de archivo que no existe ('factura.csv'), y para corregir el error deber√≠amos modificar la l√≠nea 78.

Aqu√≠ es donde se ve la utilidad de las trazas, a veces el error no es culpa de la l√≠nea en el que es producido, sino viene arrastrando un dato o condici√≥n inv√°lida desde otro punto del programa.

Que el √°rbol no nos impida ver el bosque ... üôÇ

Errores comunes
---------------

Errores de Sangr√≠a (IdentationError)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  *"7. La legibilidad cuenta."* PythonZen_

En Python es fundamental dejar sangr√≠a (espacio antes de las instrucciones), que identifica el bloque al que pertenece, ya que no usamos llaves o palabras clave para delimitar los bloques como en otros lenguajes. Si bien esto ayuda a escribir c√≥digo m√°s prolijo evitando errores de anidaci√≥n, puede ser raro hasta que uno se acostumbra.

Generalmente, cada vez que abramos un bloque (con una sentencia que termina en : -dos puntos- ), debemos incrementar la sangr√≠a. Por ej:

.. code-block:: python

    def mayor(param1, param2=0):
        if param1 is None:
            return "El valor es None=Nulo! :S"
        elif param1>param2:
            print param1,"es mayor a", param2
            return "todo bien :)"
        else:
            print param1,"es menor a", param2
            return "todo mal :("

    print mayor(5)


Que puede pasar si no lo hacemos...

Error de Sangr√≠a: se esperaba un bloque con sangr√≠a
:::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> if True:
    ... print "verdad!"
      File "<input>", line 2
        print "verdad!"
            ^
    IndentationError: expected an indented block


Aqu√≠ el ``print`` esta a la misma altura que el ``if`` (sin sangr√≠a), cuando deber√≠amos haber dejado el espacio correspondiente porque estamos abriendo un nuevo bloque con ``:``

Error de Sangr√≠a: sangr√≠a no esperada
:::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> print "hola"
    >>>    print "chau"
      File "<input>", line 1
        print "chau"
       ^
    IndentationError: unexpected indent


Aqu√≠ el ``print "chau"`` *no* esta a la misma altura que el ``print "hola"``, como no abrimos un bloque con ``:``, no es necesario dejar espacio para la sangr√≠a.

Error de Sangr√≠a: la nueva sangr√≠a no coincide con ning√∫n otro nivel exterior
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> def prueba():
    ...     if False:
    ...         pass
    ...   print "..."
      File "<input>", line 4
        print "..."

    ^
    IndentationError: unindent does not match any outer indentation level


Aqu√≠ el ``print "..."`` *no* esta a la misma altura que el ``if False`` ni que el ``pass`` ni que el ``def``, por lo que no se sabe a que bloque pertenece. Si cerramos el bloque del ``if`` deber√≠a estar a la misma altura que este, y si pertenece al bloque ``if``, deber√≠a estar dentro de este a la altura del ``pass``. Si el ``print`` no pertenece a la funci√≥n, deber√≠amos ponerlo a la misma altura que el ``def``

Errores de Sintaxis (SyntaxError)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  *"13. Deber√≠a haber una ‚Äî y preferiblemente s√≥lo una ‚Äî manera obvia de hacerlo."* PythonZen_

La sintaxis, como en cualquier lenguaje, es fundamental para que Python entienda lo que estamos queriendole decir, ya que es estricto y se reusar√° a ejecutar cualquier c√≥digo que no siga las reglas de sint√°xis definidas (que por cierto, no son muchas), a saber:

* **May√∫sculas y Min√∫sculas, identificadores (nombres) y palabras clave**: empiezan con una letra, pueden continuar con letras (a..z o A..Z), d√≠gitos (0..9) o gui√≥n bajo (_). Python reconoce la diferencia (es "case sensitive" o sensible a may√∫sculas y min√∫sculas), por lo que ``Hola`` y ``hola`` son dos identificadores distintos! Se recomienda escribir:

  * Nombres de variable y m√≥dulos (archivos) en min√∫sculas con las palabras separadas por gui√≥n bajo ('_'), por ejemplo: ``mi_variable_x``

  * Nombres de clases en CamelCase (primer letra de cada palabra en may√∫scula, luego min√∫sculas, sin separar por espacios), por ejemplo: ``MiClasePunto``

* **Palabras clave reservadas**: deben ser escritas tal cual, deben estar al principio de una linea y/o separadas con espacios y no pueden ser usadas como nombres de variables: and as assert break class continue def elif else except exec finally for global if import in is lambda or pass print raise return try with yield.

  * Sentencias simples ``assert pass del print return yield raise break continue import global exec``: son comprendidos dentro de una l√≠nea l√≥gica y varias sentencias simples pueden estar en una sola l√≠nea separadas por punto y coma

  * Sentencias compuestas ``if while for try with def class``: contienen (grupos de) otras sentencias; y de alguna manera afectan el control de la ejecuci√≥n de los mismos. En general, abarcan m√∫ltiples l√≠neas.

* **Literales**: los valores "constantes" pueden escribirse seg√∫n su tipo:

  * Cadenas (strings): encerrados por comillas simples o dobles (sin diferencia), ej: ``"mi cadena"`` o ``'mi cadena'``

    * Unicode: se identifican con una u antes de la cadena, por ej: ``u"Mi texto en espa√±ol"``

    * Raw (Crudo): se identifican con una r, son textos sin interpretar los escapes ("\"), por ej: ``r"c:\config.sys"``

    * Con triple comilla simple (``'''``) o triple comilla doble (``"""`` se encierran textos que se pueden extender varias l√≠neas

  * N√∫meros: en general, solo n√∫meros separados por el punto ("coma decimal"), ej: ``1234.567``

    * Prefijos: se utilizan para diferenciar la base en que est√° escrito el n√∫mero:

      * Hexadecimales (base 16): 0x1234

      * Binarios (base 2): 0b01010101 (solo Python 2.6 o superior)

      * Octales (base 8): 0o666 (solo Python 2.6 o superior), 0666 (solo Python 2.6 o inferior)

    * Sufijos: se utlizan para denotar el tipo de n√∫mero:

      * Largos: 123456789012345678901234567890L (long)

      * Imaginarios: 1234j

    * Notaci√≥n cient√≠fica: se indica con una e o E en el medio: ``1e100``, ``3.14e-10`` (no confundir con el n√∫mero irracional, el exponente es en base 10)

* **Operadores**:

  * Unarios:  reciben un operando: ``~ -``, por ej la negaci√≥n: ``-1``

  * Binarios: reciben dos operandos:

    * Aritm√©ticos ``+ - * ** / // %``: para c√°lculos, por ej: ``1 + 2`` (sumar 1 y 2)

    * Relacionales ``< > <= >= == !=``: para comparaciones, por ej: ``a != b`` (¬øa es diferente de b?)

    * A nivel de bit ``<< >> & | ^``: por ej. ``5>>6`` (

* **Delimitadores**: determinados caracteres indican determinadas acciones y funcionan como "separadores", cualquier otro uso (o su no utilizaci√≥n) no especificado a continuaci√≥n generar√° un error:

  * Par√©ntesis (): definen tuplas "de elementos": ``(1,2,3,4)`` o permiten llamar a una funci√≥n/crear una clase, ``mi_funcion(123)``

  * Corchetes []: definen listas "de elementos": ``["uno", "dos", "tres"]`` o permiten acceder por √≠ndice/clave a una colecci√≥n: ``mi_lista[posici√≥n]``

  * Diccionarios {}: definen diccionarios (asociando un valor a una clave) por ej. ``{'clave':'valor'``} o conjuntos

  * Decorador @: aplican una funci√≥n a una funci√≥n o clase, por ej ``@requiere_acceso``

  * Coma ``,``: separa expresiones o elementos de una secuencia, por ej: ``1, 2, 3``

  * Dos puntos ``:``: inicia bloques (con o sin sangr√≠a), elementos en un diccionario o anotaciones en una funci√≥n (Python3Mil_)

  * Igual ``=``: asigna una expresi√≥n a un nombre, por ej. ``mi_variable=5`` No confundir con igualdad: ``a==b`` Tambi√©n puede usarse la asignaci√≥n aumentada, combinando un operador, por ej: ``a+=1`` (asigna el valor de ``a+1`` a ``a``)

  * Punto y coma ``;``: separa varias instrucciones en una misma l√≠nea, por ej. ``a=1; b=2; c=a+b``. *S√≠, se puede como en C, pero tratar de no usar...*

* **Comentarios**: cualquier l√≠nea que empieze con numeral (#) es un comentario y ser√° ignorada (independientemente de lo que tiene adentro y si tiene sangr√≠a o no)

* **Caracteres sin significado**: No usar el signo pesos ($) o el signo de interrogaci√≥n (?) ya que no se utilizan en Python fuera de las cadenas y producir√° un error.

Esperando no haberlo abrumado con el resumen de la sintaxis del lenguaje (los interesados pueden ver la especificaci√≥n completa en http://docs.python.org/), veamos que pasa si no la respetamos:

Error de Sintaxis: sintaxis inv√°lida
::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> If a>1:
      File "<input>", line 1
        If a>1:
           ^
    SyntaxError: invalid syntax


Python respeta may√∫sculas y minusculas, ``If`` no es el ``if`` que queremos usar. Tener cuidado sobre todo si venimos de lenguajes que son indiferentes a este tema (por. ej. Visual Basic)

.. code-block:: python

    >>> secuencia = 1 2
      File "<input>", line 1
        secuencia = 1 2
                      ^
    SyntaxError: invalid syntax


Debemos indicar un operador entre las expresiones o un delimitador entre los elementos.  En este caso nos falto la coma ``secuencia = 1, 2``

.. code-block:: python

    >>> if a==1
    ...    print "a es verdadero!"
      File "<input>", line 1
        if a==1

    ^
    SyntaxError: invalid syntax


Las sentencias compuestas, deben terminar con dos puntos (":") para indicar el nuevo bloque que afectan ``if a==1:``

.. code-block:: python

    >>> while a=1:
      File "<input>", line 1
        while a=1:
               ^
    SyntaxError: invalid syntax


La asignaci√≥n no se puede usar en una expresi√≥n (comparaci√≥n), por ej., para evitar los errores cl√°sicos en C ``while(v=1)...`` donde nos asignaba ``1`` a ``v`` en vez de comparar si ``v`` era igual a ``1``. En este caso, usar el operador de comparaci√≥n ``while a==1:``

.. code-block:: python

    >>> def a:
      File "<input>", line 1
        def a:
             ^
    SyntaxError: invalid syntax


Por m√°s que no tengamos par√°metros en nuestra funci√≥n, los par√©ntesis son obligatorios. Ser√≠a: ``def a():``

Error de Sintaxis: FinDeLinea mientras se buscaba una cadena "simple"
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> 'abc"
      File "<input>", line 1
        'abc"
            ^
    SyntaxError: EOL while scanning single-quoted string


Las cadenas simples (de una sola l√≠nea) deben empezar y terminar en la misma l√≠nea y con el mismo caracter, comillas (") o tilde (').

Error de Sintaxis: FinDeArchivo mientras se buscaba una cadena de "m√∫ltiples l√≠neas"
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> """
    ... mucho
    ... texto
    ...
    SyntaxError: EOF while scanning triple-quoted string


Las cadenas de m√∫ltiples l√≠neas, deben empezar con triple comilla o tilde, y terminar con lo mismo. Aqu√≠ falt√≥ cerrar la cadena con ``"""`` Nota: el error es simulado, es dif√≠cil que suceda en el int√©rprete, pero si ocurre en un archivo)

Error de Sintaxis: no es posible asignar a un operador
::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> numero+antiguo=1
      File "<input>", line 1
    SyntaxError: can't assign to operator (<input>, line 1)


El nombre de la variable es inv√°lido, ser√≠a: ``numero_mas_antiguo=1``

Error de Sintaxis: "token" inv√°lido
:::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> print 08
      File "<stdin>", line 1
        print 08
               ^
    SyntaxError: invalid token


El compilador de Python es muy estricto, y si no recibe el s√≠mbolo/componente l√©xico correcto ("token") nos emitir√° estos errores. En este caso, se debe a que los numeros que comienzan con 0 es un caso especial de notaci√≥n octal (base 8), por lo que solo acepta n√∫meros del 0 al 7. Para corregir el error, eliminar el 0 que precede al n√∫mero ``print 8``

Errores de Nombres (NameError)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  *"2. Expl√≠cito es mejor que impl√≠cito."* PythonZen_

Si bien Python es din√°mico y no tenemos que declarar las variables y funciones al principio de nuestro programa, estas deben existir (estar definidas o "inicializadas") antes de poder usarlas.

O sea, previamente debimos haberle asignado un valor a una variable (con ``=``), definido una funci√≥n con ``def`` o clase con ``class``. Tener en cuenta que Python justamente es din√°mico, y si el interprete no pasa por la linea de la definici√≥n, no se define, por m√°s que este el c√≥digo en el archivo.

En otros lenguajes, si la variable no esta definida, a veces toma un valor arbitrario (nulo, 0 o cadena vacia) o queda declarada sin inicializar (tomando cualquier valor que est√© en la memoria), con los consiguientes errores que esto puede ocasionar. Para prevenir esto, en Python es necesario explicitamente definir ("inicializar") la variable con un valor inicial.

Error de Nombre: el nombre 'variable' no est√° definido
::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> saludo="Hola"
    >>> print Saludo
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    NameError: name 'Saludo' is not defined


Estamos queriendo usar un nombre (identificador) de algo que no existe. En este caso la variable ``Saludo`` no est√° inicializada, ya que el nombre de variable correcta es ``saludo`` (notar la diferencia de may√∫sculas y min√∫sculas que comentamos en la secci√≥n anterior)

Error de Nombre: el nombre global 'variable' no est√° definido
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> def mi_func():
    ...     print variable
    ...
    >>> mi_func()
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "<stdin>", line 2, in mi_func
    NameError: global name 'variable' is not defined
    >>>


Similar al anterior, estamos queriendo usar una variable que no definimos previamente (ahora dentro de una funci√≥n). O definimos la variable globalmente (fuera de la funci√≥n), o localmente (dentro de la funci√≥n).

Error de no vinculaci√≥n local: la variable local 'xxx' fue referenciada antes de asignarla
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> variable = 1
    >>> def mi_func():
    ...     print variable
    ...     variable = variable + 1
    ...
    >>> mi_func()
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "<stdin>", line 2, in mi_func
    UnboundLocalError: local variable 'variable' referenced before assignment


Una variaci√≥n del anterior, pero en este caso, debemos usar la sentencia ``global variable`` dentro de la funci√≥n, ya que, sin√≥, al asignarle un valor dentro de la funci√≥n, se convierte autom√°ticamente en una variable local, por m√°s que exista globalmente (y da error si la asignaci√≥n no est√° al principio de la funci√≥n antes de usar la variable):

.. code-block:: python

    variable = 1
    def mi_func():
        global variable
        print variable
        variable = variable + 1


Errores de Tipos (TypeError)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  *"12. Cuando te enfrentes a la ambig√ºedad, rechaza la tentaci√≥n de adivinar."* PythonZen_

Si si, Python es fuertemente tipado, en general no har√° m√°gia con nuestros datos para convertirlos de un tipo a otro, si no se lo pedimos expl√≠citamente.

No como en otros lenguajes, que cambiar√≠an el tipo de una variable silenciosamente dependiendo del contexto (que puede ser ambiguo, por ej. ¬øconvertir a ``float`` o ``int``?) con el consiguiente arrastre de un error dif√≠cil de solucionar.

Error de Tipo: tipo de operando no soportado para +: 'int' y 'str'
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> a = 5
    >>> b = "10"
    >>> a+b
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    TypeError: unsupported operand type(s) for +: 'int' and 'str'


T√≠pico, en algunos lenguajes esto puede resultar "510" o 15 (dependiendo como entienda el contexto, el √≥rden de los operandos, etc.) ya que hacen una conversi√≥n de tipos impl√≠cita.

En Python, gentilmente nos avisa que, explicitamente debemos convertir el n√∫mero a cadena (``str(a)+b`` que resulta en "510") o la cadena en n√∫mero (``a+int(b) que resulta en 15``.

Error de Tipo: se requiere un entero
::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> fecha = datetime.date('2010','05','10')
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    TypeError: an integer is required


Algunas funciones validan los par√°metros de entrada, en este caso ``datetime.date`` solicita enteros.  Ser√≠a ``datetime.date(int('2010'),int('05'),int('10'))``

Error de Tipo: el objeto 'NoneType' no es iterable
::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> secuencia = None
    >>> for i in secuencia:
    ...     pass
    ...
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    TypeError: 'NoneType' object is not iterable


Para iterar (recorrer uno a uno los elementos de una secuencia o colecci√≥n), por ej. en un ``for``, es necesario que esta sea realmente una secuencia o iterable (tuplas, listas, diccionario, conjunto, etc.)

Funciones
~~~~~~~~~

Podemos tener errores de tipo o de sintaxis respecto a las funciones, por ejemplo:

Error de Tipo: objeto 'int' no es llamable
::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> a=1
    >>> a (1)
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    TypeError: 'int' object is not callable


Estamos queriendo llamar a una variable que tiene un entero, cosa que no se puede (no es una "funci√≥n llamable"). Seguramente, o la variable no deber√≠a haber sido un entero, o en vez de llamarla deber√≠amos aplicar alg√∫n operador o m√©todo sobre ella.

Error de Tipo: funci√≥n() toma al menos un argumento (0 dados)
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> mayor()
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    TypeError: mayor() takes at least 1 argument (0 given)


Al definir la funci√≥n, dijimos que ten√≠a dos par√°metros (``param1`` y ``param2=0``). Salvo que el par√°metro tenga un valor por defecto (en el caso de param2 es 0), debemos pasarlo al llamar a la funci√≥n. Revisar...

Error de Tipo: funci√≥n() toma como mucho 2 argumentos (3 dados)
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> mayor(5,5,5)
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    TypeError: mayor() takes at most 2 arguments (3 given)


Similar al anterior, pero le pasamos m√°s par√°metros de los que necesita la funci√≥n.  Revisar...

Error de Tipo: funci√≥n() tuvo un argumento por nombre inesperado 'paramx'
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> mayor(param3=5)
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    TypeError: mayor() got an unexpected keyword argument 'param3'


Idem al anterior, tratamos de pasarle un par√°metro (esta vez por nombre), que tampoco esta definido en la misma. Revisar....

Error de Sint√°xis: argumento por posici√≥n luego de argumento por nombre
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> mayor(param2=5,3)
      File "<input>", line 1
    SyntaxError: non-keyword arg after keyword arg (<input>, line 1)


Los par√°metros por posici√≥n se pasan antes que los par√°metros por nombre: ``mayor(3,param2=5)``

Errores de Valores (ValueError)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

De manera similar a los errores de tipos, cuando pasemos un dato que no se puede convertir o es inv√°lido, Python nos mostrar√° estos mensajes:

Error de Valor: literal inv√°lido para int() con base 10: 'xxxx'
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> int("10ab")
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    ValueError: invalid literal for int() with base 10: '10ab'


En este caso '10ab', salvo que las letras sean un error te escritura, estamos intentando convertir un valor hexadecimal (base 16) a entero, sin especificarlo, por lo que intenta base 10 por defecto. Lo correcto ser√≠a ``int("10ab",16)``

Igualmente siempre es conveniente capturar este tipo de errores, para validar que el dato a convertir es realmente un n√∫mero, y sin√≥, tomar una medida adecuada.

Error de Valor: literal inv√°lido para float() con base 10: 'xxxx'
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> float("10,50")
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    ValueError: invalid literal for float(): 10,50


Lo mismo que el anterior, pero con la salvedad que para python debemos indicar los decimales con el punto (.) y no la coma (,). Podr√≠amos convertirlo facilmente: ``float("10,50".replace(",",".")``

Error de Valor: el d√≠a esta fuera de rango para el mes
::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> fecha = datetime.date(10,5,2010)
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    ValueError: day is out of range for month


Estamos intentando pasar un valor a la funci√≥n en el par√°metro que no corresponde: ``datetime.date(a√±o, mes, d√≠a)`` Ser√≠a ``fecha = datetime.date(2010,5,10)``

Error de Valor: demasiados valores para desempaquetar
:::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> a,b,c = (1,2,3,4)
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    ValueError: too many values to unpack


En Python, podemos asignar varios elementos a una lista de destinos, pero la cantidad de destinos y de elementos a asignar deben coincidir.  En este caso, ``a=1``, ``b=2``, ``c=3`` y al cuarto elemento ya no hay a que asignarlo.  Podr√≠amos agregar un destino m√°s: ``a,b,c,d = (1,2,3,4)`` o sacar un elemento a asignar de la expresi√≥n: ``a,b,c = (1,2,3)``.

Error de Valor: necesita m√°s de 2 valores para desempaquetar
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> x,y,z = 1, 2
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    ValueError: need more than 2 values to unpack


Caso inverso al anterior, nos falta un elemento en la expresi√≥n de asignaci√≥n (o nos sobra un destino). Posible soluci√≥n: sacamos un destino ``x,y = 1, 2`` o agregamos un elemento: ``x,y,< = 1, 2 ,3``

Error de Valor: caracter de escape \x inv√°lido
::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> open("C:\xaraza.txt")
    ValueError: invalid \x escape


En los strings (cadenas), ciertos caracteres tienen un significado especial. Es el caso de la barra invertida ("\"), que identifica que lo que sigue definie un caract√©r especial ("\n" para el salto de linea, "\xfe" para el caracter cuyo c√≥digo hexadecimal es FE, etc.) Si queremos una barra invertida (por ejemplo, en un directorio de windows), debemos usar strings crudos (raws): r"C:\xaraza.txt" o doble barra invertida: "C:\\xaraza.txt"

Errores de Atributos (AttributeError)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Practicamente todo en Python es un objeto, y estos objetos tienen m√©todos y "propiedades" (ambos denominados atributos). Si intentamos acceder a un atributo que no pertenece al objeto, se producir√° uno de los siguientes errores:

Error de Atributo: el objeto 'NoneType' no tiene el atributo 'split'
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> fecha = None
    >>> fecha.split("/")
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    AttributeError: 'NoneType' object has no attribute 'split'


En este caso estamos queriendo invocar a un m√©todo ``split`` que no esta definido para este tipo de objeto (aqu√≠ ``None``, pero podr√≠a ser cualquier otro). Seguramente la variable fecha deber√≠a ser otra cosa, o nos equivocamos de m√©todo a invocar.

Error de Atributo: el objeto 'modulo' no tiene el atributo 'next'
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> import csv
    >>> csv.next()
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    AttributeError: 'module' object has no attribute 'next'


Similar al anterior, pero en este caso estamos importando un m√≥dulo ``csv`` que no tiene la funci√≥n ``next``}. En este caso particular, ``next`` es un m√©todo de la instancia de ``csv_reader``, no del m√≥dulo.

Errores de √çndice (IndexError)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Error de √çndice: el √≠ndice de lista esta fuera de rango
:::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> l=[1,2,3]
    >>> l[3]
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    IndexError: list index out of range


En este caso, la lista tiene 3 elementos, y se acceden desde la posici√≥n 0 hasta la 3 (como en C), lo correcto ser√≠a ``l[2]`` para el tercer elemento.

Errores de Clave (KeyError)
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Los diccionarios se acceden por clave asociativa, si la clave no existe, se producir√° un error:

.. code-block:: python

    >>> dict = {'clave': 'valor'}
    >>> dict['clave2']
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    KeyError: 'clave2'


En este caso, podr√≠amos acceder al valor de correcto usando ``dict['clave']`` que s√≠ existe, o pedir ``dict.get('clave2')`` que si la clave no existe, devolver√° ``None`` y no producir√° una excepci√≥n.

Otros Errores
~~~~~~~~~~~~~

Los errores del sistema operativo y bibliotecas relacionadas tambi√©n se expresan como excepciones:

IOError: [Errno 2] No existe el archivo o directorio: 'C:\\saraza'
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> open("C:\saraza")
    Traceback (most recent call last):
      File "<input>", line 1, in <module>
    IOError: [Errno 2] No such file or directory: 'C:\\saraza'


El archivo solicitado no existe, si queremos crearlo deber√≠amos pasarle un segundo par√°metro que lo especifique: ``open("saraza","a")`` o ``open("saraza","w")``

Advertencias
~~~~~~~~~~~~

Como comentabamos, hay Excepciones que no son errores, sino advertencias.  Se usan para avisarnos sobre alg√∫n cambio en el lenguaje o c√≥digo potencialmente incorrecto o perjudicial:

Advertencia de "Deprecaci√≥n": el m√≥dulo md5 esta desaconsejado; use en su lugar haslib
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

.. code-block:: python

    >>> import md5
    __main__:1: DeprecationWarning: the md5 module is deprecated; use hashlib instead


En esta versi√≥n de Python, el m√≥dulo md5 existe por compatibilidad hacia atr√°s.  En versiones posteriores podr√≠a no existir m√°s. Se recomienda revisar la recomendaci√≥n que nos da Python: el m√≥dulo hashlib.

.. ############################################################################




.. _pythonzen: /pythonzen
.. _python3mil: /python3mil
